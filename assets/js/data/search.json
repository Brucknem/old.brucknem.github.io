[ { "title": "How to install OpenCV", "url": "/posts/install-opencv/", "categories": "Installation", "tags": "coding, tutorials, install", "date": "2021-07-23 16:55:00 +0800", "snippet": "Run the following shell script to install the latest OpenCV to Ubuntu 20.04.The script will install OpenCV with support for the contrib modules, CUDA, cuDNN, OpenGL, Python3 and much more. See the script for all enabled options.The script will download the OpenCV core from the OpenCV repository and the OpenCV contrib modules from the OpenCV contrib repository.The script then compiles the source and creates a .deb via checkinstall. Follow the instructions from checkinstall to install the compiled package.PrerequisitesOpenCV relies heavily on CUDA and cuDNN.If you don’t have CUDA and/or cuDNN installed, please see this CUDA and cuDNN installation guide.The script relies on CMake. If you don’t have CMake installed, please see this CMake installation guide.The script relies on Ceres Solver. If you don’t have Ceres Solver installed, please see this Ceres Solver installation guide.Install# Install Dependenciessudo apt update -y &amp;&amp; sudo apt upgrade -ysudo apt install -y g++ wget unzipsudo apt install liblz-dev libtiff5 libtiff5-dev libtiff-tools libwebp6sudo apt-get install vlc ubuntu-restricted-extrassudo apt install liblz-dev -ysudo apt-get install python3-dev python3-numpy python3-pip -ysudo apt-get install libavcodec-dev libavformat-dev libavutil-dev libswscale-dev -ysudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev -ysudo apt-get install libpng-dev -ysudo apt-get install libjpeg-dev -ysudo apt-get install libopenexr-dev -ysudo apt-get install libtiff-dev -ysudo apt-get install libwebp-dev -ysudo apt-get install qt5-default -ysudo apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev -ysudo apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev -y sudo apt install libfaac-dev libmp3lame-dev libvorbis-dev -ysudo apt-get install libgtk-3-dev -ysudo -H pip3 install -U pip numpysudo apt-get install libtbb-dev -ysudo apt-get install libprotobuf-dev protobuf-compiler -ysudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen -ysudo apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils -ysudo ln -s -f /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h# Downloadcd /tmpwget -O opencv.zip https://github.com/opencv/opencv/archive/master.zipwget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/master.zipunzip opencv.zipunzip opencv_contrib.zip# InstallBUILD_DIR=\"opencv_build\"mkdir $BUILD_DIRcd $BUILD_DIRCUDA_ARCH_BIN=\"75\" # You may replace this with your GPU architecturecmake \\ -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-master/modules \\ -DCMAKE_BUILD_TYPE=Release \\ -DOPENCV_ENABLE_NONFREE=ON \\ -DBUILD_opencv_python3=ON \\ -DINSTALL_TESTS=ON \\ -DINSTALL_C_EXAMPLES=ON \\ -DINSTALL_PYTHON_EXAMPLES=ON \\ -DWITH_CUDNN=ON \\ -DOPENCV_DNN_CUDA=ON \\ -DWITH_CUDA=ON \\ -DCUDA_ARCH_BIN=$CUDA_ARCH_BIN \\ -DWITH_CUBLAS=ON \\ -DENABLE_FAST_MATH=ON \\ -DCUDA_FAST_MATH=ON \\ -DWITH_OPENGL=ON \\ -DWITH_GSTREAMER=ON \\ -DOPENCV_GENERATE_PKGCONFIG=ON \\ -DWITH_TBB=ON \\ -DWITH_V4L=ON \\ -DWITH_QT=ON \\ -DWITH_OPENGL=ON \\ -DOPENCV_GENERATE_PKGCONFIG=ON \\ -DOPENCV_PC_FILE_NAME=opencv.pc \\ -DBUILD_EXAMPLES=ON \\ ../opencv-masterNUM_CPU_CORES=$(grep -c ^processor /proc/cpuinfo)cmake --build . -j $NUM_CPU_CORESsudo apt install checkinstall libssl-dev -ysudo checkinstall --pkgname opencvUninstallsudo dpkg -r opencv" }, { "title": "How to install CUDA and cuDNN", "url": "/posts/install-cuda/", "categories": "Installation", "tags": "coding, tutorials, install", "date": "2021-07-23 16:50:00 +0800", "snippet": "Install the Nvida drivers Open Additional Drivers from the system launcher. Select the most recent NVIDIA driver metapackage from the list. Reboot to make the changes activeInstall CUDAPrecisely follow the instructions on the CUDA installation guide.Install cuDNNPrecisely follow the instructions on the cuDNN installation guide.On Ubuntu 20.04, you must use the Tar File Installation." }, { "title": "How to install the Ceres Solver", "url": "/posts/install-ceres-solver/", "categories": "Installation", "tags": "coding, tutorials, install", "date": "2021-07-23 16:25:00 +0800", "snippet": "Run the following shell script to install the Ceres Solver to Ubuntu 20.04.The script will download the source from the Github repository.The script then compiles the source and creates a .deb via checkinstall. Follow the instructions from checkinstall to install the compiled package.PrerequisitesThe script relies on CMake. If you don’t have CMake installed, please see this CMake installation guide.Install# Install Dependenciessudo apt update -y &amp;&amp; sudo apt upgrade -ysudo apt-get install libgoogle-glog-dev libgflags-dev -ysudo apt-get install libatlas-base-dev -ysudo apt-get install libeigen3-dev -ysudo apt-get install libsuitesparse-dev -y# Downloadcd /tmpCERES_VERSION=\"ceres-solver-2.0.0\"CERES_ARCHIVE=\"$CERES_VERSION.tar.gz\"wget http://ceres-solver.org/$CERES_ARCHIVEtar xfv $CERES_ARCHIVE# Installcd $CERES_VERSIONmkdir buildcd buildNUM_CPU_CORES=$(grep -c ^processor /proc/cpuinfo)cmake ..cmake --build . -j $NUM_CPU_CORESsudo apt install checkinstall libssl-dev -ysudo checkinstall --pkgname ceres-solverUninstallsudo dpkg -r ceres-solver" }, { "title": "How to install the latest CMake version from source", "url": "/posts/install-latest-cmake/", "categories": "Installation", "tags": "coding, tutorials, install", "date": "2021-07-23 15:50:00 +0800", "snippet": "Run the following shell script to install the latest CMake version.The script will automatically check the for the latest CMake version and download the source from the Github repository.The script then compiles the source and creates a .deb via checkinstall. Follow the instructions from checkinstall to install the compiled package.Install# Check VersionLOCATION=$(wget https://github.com/Kitware/CMake/releases/latest 2&gt;&amp;1 | grep Location | awk '{print $2}')if [ \"$SHELL\" = \"/usr/bin/zsh\" ]; then VERSION=(${(@s:/:)LOCATION})else IFS='/' read -ra VERSION &lt;&lt;&lt; \"$LOCATION\"fiVERSION=$(echo ${VERSION[-1]})VERSION=$(echo ${VERSION:1})echo \"Installing: CMake v$VERSION\"# Downloadcd /tmpCMAKE_EXTRACTED_DIR=\"cmake-$VERSION\"CMAKE_ARCHIVE=\"$CMAKE_EXTRACTED_DIR.tar.gz\"wget https://github.com/Kitware/CMake/releases/download/v$VERSION/$CMAKE_ARCHIVEtar xfv $CMAKE_ARCHIVE# Installcd $CMAKE_EXTRACTED_DIR./bootstrapNUM_CPU_CORES=$(grep -c ^processor /proc/cpuinfo)make -j $NUM_CPU_CORESsudo apt update -y &amp;&amp; sudo apt upgrade -ysudo apt install checkinstall libssl-dev -ysudo checkinstall --pkgname cmakeCheck Installationcmake --versionUninstallsudo dpkg -r cmake" }, { "title": "How to install mujoco-py and robosuite", "url": "/posts/setup-mujoco-py-and-robosuite/", "categories": "Install", "tags": "coding, tutorials, install", "date": "2021-07-21 16:20:00 +0800", "snippet": "Prerequisites Go to the MuJoCo website and obtain a license. Download and extract MuJoCocd /tmpwget https://www.roboti.us/download/mujoco200_linux.zipmkdir -p $HOME/.mujoco/mujoco200unzip mujoco200_linux.zipmv mujoco200_linux/* $HOME/.mujoco/mujoco200 Download the license and place it in ~/.mujoco/mjkey.txtmv $HOME/Downloads/mjkey.txt $HOME/.mujoco/Installation# Install dependenciessudo apt update -y &amp;&amp; sudo apt upgrade -ysudo apt install libosmesa6-dev libgl1-mesa-glx libglfw3 libglew-dev -ysudo ln -s /usr/lib/x86_64-linux-gnu/libGL.so.1 /usr/lib/x86_64-linux-gnu/libGL.sosudo add-apt-repository ppa:deadsnakes/ppasudo apt-get update -ysudo apt-get install python3.6 -ysudo apt-get install python3.6-dev sudo apt install patchelfsudo apt purge python-virtualenv -ysudo apt purge python3-virtualenv -ysudo pip3 install virtualenv # Create virtualenvvirtualenv -p /usr/bin/python3.6 venvsource venv/bin/activate# Install python -m pip install -I testresourcespython -m pip install -I fastenerspython -m pip install -I --no-use-pep517 mujoco-pypython -m pip install -I robosuiteSetupCommand Lineif [ \"$SHELL\" = \"/usr/bin/zsh\" ]; then SHELL_TYPE=\"zsh\"else SHELL_TYPE=\"bash\"fiecho \"export LD_LIBRARY_PATH=\\$LD_LIBRARY_PATH:/home/$USER/.mujoco/mujoco200/bin\" &gt;&gt; ~/.$SHELL_TYPE\"rc\"echo \"export LD_PRELOAD=\\$LD_PRELOAD:/usr/lib/x86_64-linux-gnu/libGLEW.so\" &gt;&gt; ~/.$SHELL_TYPE\"rc\"source ~/.$SHELL_TYPE\"rc\"PyCharmAdd the following to the Environment variables in the run configs.;LD_LIBRARY_PATH=/home/brucknem/.mujoco/mujoco200/bin;LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libGLEW.soTo apply it to all future created run configs: Open any run config Click on lower left: Edit configuration templates... Add the above to the Environment variablesReferences mujoco-py robosuite" }, { "title": "Links to remark", "url": "/posts/links-to-remark/", "categories": "Links", "tags": "coding, tutorials, links", "date": "2021-03-13 03:55:00 +0800", "snippet": "PapersRepositoriesContinual Learning https://github.com/chrhenning/hypercl https://github.com/rvl-lab-utoronto/HyperCRL https://github.com/optimass/continual_learning_papers https://github.com/TLESORT/Generative_Continual_Learning https://github.com/jalexvig/associative_compression_networksDeep Learning https://github.com/PyTorchLightning/pytorch-lightning https://github.com/znxlwm/pytorch-generative-model-collections https://github.com/keras-team/kerasBooks https://www.microsoft.com/en-us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf https://github.com/changwookjun/StudyBookUtils https://github.com/jbeder/yaml-cpp https://github.com/cdr/code-serverTutorialsHow to stream the Raspberry Pi camera using flask Original My implementation" }, { "title": "Getting data from OpenDRIVE HD maps", "url": "/posts/opendrive-parsing/", "categories": "Studies", "tags": "coding, guided-research, autonomous-driving", "date": "2021-02-19 02:55:00 +0800", "snippet": "During my Guided Research I was given some HD maps of some part of the highway A9 near Munich, Germany.I use these maps to get the world positions of landmarks like delineators, road signs, trees… These landmarks are then matched with some video footage of cameras mounted on gantry bridges.My final goal is to minimize the reprojection error from the landmarks and the corresponding video pixels to find the camera world pose (the extrinsic parameters).OpenDRIVE parser &amp; query implementationI am currently implementing a parser for these maps, which are in the OpenDRIVE format. This is an XML format which is pretty complex and thus powerful. It’s the industry standard to describe road networks.Converting XML to C++I was struggling really hard with the implementation of the parser, and it took me around a week to find out how to implement it. The good thing is that ASAM provides a free XML schema definition (XSD) which describes how OpenDRIVE files have to be structured. The hard part was to get the definition into code so that I can process the data.The first thing I thought of was to use an XML to C++ compiler which should generate C++ data bindings from the XSD files. I quickly found the Code Synthesis data binding compiler, but I couldn’t get it to work at all for the OpenDRIVE V1.6 standard. I thus tried to implement the standard by hand, which did turn out to be not feasibly at all, so I again searched for ready made solutions or how to use the compiler.Eventually, after around one week of despair, I finally found out that our maps conform to the OpenDRIVE V1.4 standard. I then gave the data binding compiler another try and voila, after another day of fiddling around, it works as I expect it to do and produces code that can parse the HD maps. I can now represent the data as a nice object model. What a relief!Geometric primitives define road segmentsOpenDRIVE defines roads as a collection of five different geometric primitives: lines, spirals, arcs, cubic polynoms (which are deprecated) and parametric cubic curves. These primitives are stacked together along a reference line and thus define the roads shape in the \\((x, y)\\)-plane. The plane itself is the earth projected onto a flat surface. You can imaging this like unrolling the globe into a flat map. With the parser from the previous section retrieving these primitives is straightforward.The landmarks I’m interested in are defined as objects and signals in the OpenDRIVE standard. The position of these landmarks is given as the \\(s\\)-coordinate along the reference line. To calculate the world position of the landmarks in the \\((x, y)\\)-plane I have to interpolate along the geometric primitives.A line going from \\((-47, 0.7)^T\\) to \\((-0.7, 35.5)^T\\).For a line the interpolation is easy. Just go from the start some amount into the heading direction.A parametric cubic curve going from \\((3.1, 1.4)^T\\) to \\((4.7, 4.8)^T\\).For a parametric cubic curve the interpolation is a bit trickier. The resulting coordinate along the curve can be calculated with the given parameters and formulae:\\[u(p) = aU + bU*p + cU*p^2 + dU*p^3\\]\\[v(p) = aV + bV*p + cV*p^2 + dV*p^3\\]Roads are composed by geometric primitivesRoads often change their shape as they have to adjust to the local surface conditions and terrain properties. To model these changes OpenDRIVE composes roads by stacking geometric primitives. This gives the flexibility to model arbitrary road shapes.Roads are defined by stacking the geometric primitives. The primitives also define the curvature and thus directly the angle of the steering wheel.Landmarks along the road with \\(s\\) and \\(t\\) coordinatesThe OpenDRIVE standard defines the locations of objects and signals relative to the reference line. The \\(s\\)-coordinate defines how far the object is from the start of the road. The \\(t\\)-coordinate defines how far the object is offset to the left or right of the reference line.Together with the roads world position, the geometries, the geometric primitives and the \\(s\\)- and \\(t\\)-coordinates I am now able to calculate the world position of the landmarks I am interested in (in the \\((x, y)\\)-plane). Here are some google links with the coordinates that show a tree, a delineator and a streetlamp. Be aware that the calculated positions from the HD map do not exactly align with the Google Maps positions as Google takes images from satellites in low earth orbit, thus from a high of 160 km to 2000 km above ground. It’s a wonder that Google can provide the google maps service at all with images taken from that far, so please be patient with any inaccuracy.Ongoing workAs the calculation of the world positions is now finished in the \\((x, y)\\)-plane I will now focus on the height of the objects. These can be calculated using the different road shape attributes, i.e. the elevation.ImplementationAt my OpenDRIVE github repository you can have a look at the implementation.Example imagesThe images each show a part of the highway A9 near Munich. In the images taken from the map you see the roads in green and the relevant landmarks in violet. There is also one delineator highlighted in red.Complete camera viewA part of the the highway A9 near Munich in the HD map.More or less the same part of the the highway A9 near Munich viewed from a camera mounted on a gantry bridge.Zoomed towards the highway exitThe same part of the the highway A9 near Munich, zoomed towards the highway exit, in the HD map.The same part of the the highway A9 near Munich, zoomed towards the highway exit, from a camera mounted on a gantry bridge.References The images for the posts are hosted on my other Github. There are also the links to the original sources given." }, { "title": "Include CMake projects from Github", "url": "/posts/including-cmake-github-projects/", "categories": "Coding", "tags": "tutorials, cmake, github, coding", "date": "2021-02-16 22:51:00 +0800", "snippet": "When I develop a CMake based project I often want to include other CMake projects into mine. Gladly CMake offers a quick and easy way on how to automatically pull the other project from Github, build it using its own CMakeLists.txt and make the results available to my own project.CMakeList.txt.inTo make CMake aware of the other project just add a CMakeList.txt.in and paste the following snippet into it. Keep in mind to replace the &lt;PARTS-IN-BRACKETS&gt; with your own values. An example can be found at the end.cmake_minimum_required(VERSION 2.8.12)project(&lt;OTHER-PROJECT&gt; NONE)include(ExternalProject)ExternalProject_Add(&lt;OTHER-PROJECT&gt; GIT_REPOSITORY &lt;LINK-TO-GIT-REPOSITORY&gt; GIT_TAG &lt;COMMIT-OR-BRANCH-TO-USE&gt; SOURCE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/&lt;OTHER-PROJECT&gt;-src\" BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}/&lt;OTHER-PROJECT&gt;-build\" CONFIGURE_COMMAND \"\" BUILD_COMMAND \"\" INSTALL_COMMAND \"\" TEST_COMMAND \"\")CMakeList.txtNow that CMake is aware of the project to include we can start building and including it. To do so add the following snippet to your projects CMakeLists.txt. Again, keep in mind to replace the &lt;OTHER-PROJECT&gt; with the value you chose in the CMakeList.txt.in. An example can be found at the end.# Download and unpack the other project at configure timeconfigure_file(CMakeLists.txt.in &lt;OTHER-PROJECT&gt;-download/CMakeLists.txt)execute_process(COMMAND ${CMAKE_COMMAND} -G \"${CMAKE_GENERATOR}\" . RESULT_VARIABLE result WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/&lt;OTHER-PROJECT&gt;-download)if (result) message(FATAL_ERROR \"CMake step for &lt;OTHER-PROJECT&gt; failed: ${result}\")endif ()execute_process(COMMAND ${CMAKE_COMMAND} --build . RESULT_VARIABLE result WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/&lt;OTHER-PROJECT&gt;-download)if (result) message(FATAL_ERROR \"Build step for &lt;OTHER-PROJECT&gt; failed: ${result}\")endif ()# Add the other project directly to our build.add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/&lt;OTHER-PROJECT&gt;-src ${CMAKE_CURRENT_BINARY_DIR}/&lt;OTHER-PROJECT&gt;-build EXCLUDE_FROM_ALL)### Here goes your normal project definition, source setup and linking# Finally link the other project to our own project.target_link_libraries(&lt;YOUR-OWN-PROJECT&gt; ... &lt;OTHER-PROJECT&gt; )ExampleRecently I included the TinyXML-2 by Lee Thomason into my Guided Research project. Fortunately he provides a CMakeLists.txt which enabled me to build and include it automatically using my CMake setup.CMakeList.txt.incmake_minimum_required(VERSION 3.10)project(tinyxml2 NONE)include(ExternalProject)ExternalProject_Add(tinyxml2 GIT_REPOSITORY https://github.com/leethomason/tinyxml2.git GIT_TAG master SOURCE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/tinyxml2-src\" BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}/tinyxml2-build\" CONFIGURE_COMMAND \"\" BUILD_COMMAND \"\" INSTALL_COMMAND \"\" TEST_COMMAND \"\")CMakeList.txt# Download and unpack tinyxml2 at configure timeconfigure_file(CMakeLists.txt.in tinyxml2-download/CMakeLists.txt)execute_process(COMMAND ${CMAKE_COMMAND} -G \"${CMAKE_GENERATOR}\" . RESULT_VARIABLE result WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/tinyxml2-download)if (result) message(FATAL_ERROR \"CMake step for tinyxml2 failed: ${result}\")endif ()execute_process(COMMAND ${CMAKE_COMMAND} --build . RESULT_VARIABLE result WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/tinyxml2-download)if (result) message(FATAL_ERROR \"Build step for tinyxml2 failed: ${result}\")endif ()# Add tinyxml2 directly to our build.add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/tinyxml2-src ${CMAKE_CURRENT_BINARY_DIR}/tinyxml2-build EXCLUDE_FROM_ALL)### Here goes your normal project definition, source setup and linking# Finally link the other project to our own project.target_link_libraries(myProject ... tinyxml2 )References CMake The structure on how to include code from Github via CMake originates from the GoogleTest framework. Example project: TinyXML-2 Lee Thomason " }, { "title": "Writing an About page", "url": "/posts/making-about/", "categories": "Setup", "tags": "about, page", "date": "2021-02-12 22:36:00 +0800", "snippet": "The first impression looks to be the most important one. Thats what the Aboutpage is for.At some point in future I will update my About page following the guide of Tracie Forbes." }, { "title": "Automated Camera Stabilization and Calibration for Intelligent Transportation Systems", "url": "/posts/guided-research/", "categories": "Studies", "tags": "coding, guided-research, computer-vision, autonomous-driving", "date": "2021-02-12 20:52:00 +0800", "snippet": "Within the PROVIDENTIA++ project, a section of the highway A9 between Munich and Nuremberg was converted to a testing site for autonomous driving. As part of this, a large sensor network system has been set up along the highway to allow monitoring and steering of traffic as well as to improve the coordination between autonomous and traditional cars. The primary task of the intelligent system is to create a digital traffic twin that accurately represents the physical road situation in real-time. Based on this digital twin, the smart infrastructure can provide a far-reaching and comprehensive view to the drivers and autonomous cars in order to improve their situational awareness within the current traffic environment. A video about the PROVIDENTIA project is available on YouTube.DescriptionA key challenge lies in the reliable and accurate calibration of the differentsensors. The calibration is especially challenging when the sensor is subject toreal-life disturbances like vibration of its mounting pole caused by wind ordisplacements due to temperature expansion. The aim of this Guided Research is toinvestigate the feasibility to automatically stabilize and calibrate a shakingcamera using an additional IMU sensor that delivers measurements on thedisturbances.Tasks Familiarization with stabilization and calibration methods via literature research Development of an experimental setup consisting of an oscillating platform equipped with a camera and an IMU Development of an approach to automatically stabilize and calibrate the camera Evaluation of the concept using real-life dataImplementation and ResourcesTimelineganttFamiliarisation : done, des1, 2020-11-01, 2020-11-30Dynamic Stabilization : done, des2, after des1, 2021-01-15Static Calibration : done, des3, after des2, 2021-02-28Evaluation : done, des4, after des3, 2021-03-31Report : active, des5, after des4, 2021-04-18ExamplesWill follow soon." }, { "title": "My journey", "url": "/posts/curriculum/", "categories": "Live", "tags": "live, curriculum", "date": "2021-02-12 20:26:00 +0800", "snippet": "The diagrams are hard to read in dark mode. Better switch to light in the lower left corner of the sidebar.Schoolgantt title School \tElementary School\t\t\t:\tdone,\t\tdes1,\t2000-08-31,\t2004-08-31 \t\tGymnasium\t\t\t\t\t:\tdone,\t\tdes2,\tafter des1,\t2014-06-27Studiesgantt title Studies\tsection Augsburg \tMathematics, B.Sc.\t\t\t:\tdone,\t\tdes1,\t2014-10-01,\t2015-09-30\tsection Munich Games Engineering, B.Sc. : done, des2, after des1, 2018-10-15\t\tBachelor Thesis\t\t\t\t: \tdone,\t\tdes3,\t2018-04-15,\t2018-10-15 Games Engineering, M.Sc. : active, des4, after des3, 2021-10-31\tsection Practical\t\tFortiss (Practical)\t\t\t:\tdone,\t\tdes5,\t2020-04-01,\t2020-09-30\t\tProvidentia++ (GR)\t\t\t:\tactive,\t\tdes6,\t2020-11-01,\t2021-04-15Workgantt title Work\tsection Study related \tCQSE GmbH, Working Student\t:\tactive,\t\tdes1,\t2018-03-01,\t2021-12-31\t\tTutor @ TUM\t\t\t\t\t:\tdone,\t\tdes4,\t2017-10-01,\t2017-10-31\tsection Other \tParktheater (Runner)\t\t:\tdone,\t\tdes2,\t2013-09-01,\t2016-02-28 Parktheater (Barkeeper)\t\t: done, des3, after des2, 2020-02-28" }, { "title": "Welcome to my site!", "url": "/posts/welcome-to-brucknem/", "categories": "Welcome", "tags": "welcome", "date": "2021-02-12 03:15:00 +0800", "snippet": "Hi there 👋 🔭 I’m currently researching for my Master Thesis at the Chair of Robotics, Artificial Intelligence and Real-time Systems. 🌱 I’m currently working as a student research assistant at the Providentia++ project. 👯 I’m looking to collaborate on projects related to Computer Vision, Continual Learning and Reinforcement Learning. 💬 Ask me about anything. I’m happy to discuss any topic and even more if I can help you. 📫 How to reach me: The email related to this account if visible. Otherwise create an issue on any of my projects and I will respond to you. ⚡ Fun fact: There are a lot of nice organisations like 4Ocean or German Zero that fight against worldwide pollution and climate change. They are always happy to get support.Work in progressI started my page on 2021/11/02 and will update the contents as often aspossible.Stay tuned!" }, { "title": "Enable Google Page Views", "url": "/posts/enable-google-pv/", "categories": "Blogging, Tutorial", "tags": "google analytics, pageviews", "date": "2021-01-04 07:32:00 +0800", "snippet": " The content of this post applies only to Universal Analytics property (UA), not Google Analytics 4 (GA 4). In addition, since UA is about to be deprecated on Jul 1, 2023, the Page Views feature of Chirpy will also be deprecated at that time.This post is to enable Page Views on the Chirpy theme based blog that you just built. This requires technical knowledge and it’s recommended to keep the google_analytics.pv.* empty unless you have a good reason. If your website has low traffic, the page views count would discourage you to write more blogs. With that said, let’s start with the setup.Set up Google AnalyticsCreate GA account and propertyFirst, you need to set up your account on Google analytics. While you create your account, you must create your first Property as well. Head to https://analytics.google.com/ and click on Start Measuring Enter your desired Account Name and choose the desired checkboxes Enter your desired Property Name. This is the name of the tracker project that appears on your Google Analytics dashboard Enter the required information About your business Hit Create and accept any license popup to set up your Google Analytics account and create your propertyCreate Data StreamWith your property created, you now need to set up Data Stream to track your blog traffic. After you signup, the prompt should automatically take you to create your first Data Stream. If not, follow these steps: Go to Admin on the left column Select the desired property from the drop-down on the second column Click on Data Streams Add a stream and click on Web Enter your blog’s URLIt should look like this:Now, click on the new data stream and grab the Measurement ID. It should look something like G-V6XXXXXXXX. Copy this to your _config.yml file:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID # Google Analytics pageviews report settings pv: proxy_endpoint: # fill in the Google Analytics superProxy endpoint of Google App Engine cache_path: # the local PV cache data, friendly to visitors from GFW regionWhen you push these changes to your blog, you should start seeing the traffic on your Google Analytics. Play around with the Google Analytics dashboard to get familiar with the options available as it takes like 5 mins to pick up your changes. You should now be able to monitor your traffic in real time.Setup Page ViewsThere is a detailed tutorial available to set up Google Analytics superProxy. But, if you are interested to just quickly get your Chirpy-based blog display page views, follow along. These steps were tested on a Linux machine. If you are running Windows, you can use the Git bash terminal to run Unix-like commands.Setup Google App Engine Visit https://console.cloud.google.com/appengine Click on Create Application Click on Create Project Enter the name and choose the data center close to you Select Python language and Standard environment Enable billing account. Yeah, you have to link your credit card. But, you won’t be billed unless you exceed your free quota. For a simple blog, the free quota is more than sufficient. Go to your App Engine dashboard on your browser and select API &amp; Services from the left navigation menu Click on Enable APIs and Services button on the top Enable the following APIs: Google Analytics API On the left, Click on OAuth Consent Screen and accept Configure Consent Screen. Select External since your blog is probably hosted for the public. Click on Publish under Publishing Status Click on Credentials on the left and create a new OAuth Client IDs credential. Make sure to add an entry under Authorized redirect URIs that matches: https://&lt;project-id&gt;.&lt;region&gt;.r.appspot.com/admin/auth Note down the Your Client ID and Your Client Secret. You’ll need this in the next section. Download and install the cloud SDK for your platform: https://cloud.google.com/sdk/docs/quickstart Run the following commands: [root@bc96abf71ef8 /]# gcloud init~snip~Go to the following link in your browser: https://accounts.google.com/o/oauth2/auth?response_type=code&amp;client_id=XYZ.apps.googleusercontent.com&amp;redirect_uri=ABCDEFGEnter verification code: &lt;VERIFICATION CODE THAT YOU GET AFTER YOU VISIT AND AUTHENTICATE FROM THE ABOVE LINK&gt;You are logged in as: [blah_blah@gmail.com].Pick cloud project to use:[1] chirpy-test-300716[2] Create a new projectPlease enter numeric choice or text value (must exactly match listitem): 1[root@bc96abf71ef8 /]# gcloud info# Your selected project info should be displayed here Setup Google Analytics superProxy Clone the Google Analytics superProxy project on Github: https://github.com/googleanalytics/google-analytics-super-proxy to your local. Remove the first 2 lines in the src/app.yaml file: - application: your-project-id- version: 1 In src/config.py, add the OAUTH_CLIENT_ID and OAUTH_CLIENT_SECRET that you gathered from your App Engine Dashboard. Enter any random key for XSRF_KEY, your config.py should look similar to this #!/usr/bin/python2.7__author__ = 'pete.frisella@gmail.com (Pete Frisella)'# OAuth 2.0 Client SettingsAUTH_CONFIG = { 'OAUTH_CLIENT_ID': 'YOUR_CLIENT_ID', 'OAUTH_CLIENT_SECRET': 'YOUR_CLIENT_SECRET', 'OAUTH_REDIRECT_URI': '%s%s' % ( 'https://chirpy-test-XXXXXX.ue.r.appspot.com', '/admin/auth' )}# XSRF SettingsXSRF_KEY = 'OnceUponATimeThereLivedALegend' You can configure a custom domain instead of https://PROJECT_ID.REGION_ID.r.appspot.com.But, for the sake of keeping it simple, we will be using the Google provided default URL. From inside the src/ directory, deploy the app [root@bc96abf71ef8 src]# gcloud app deployServices to deploy:descriptor: [/tmp/google-analytics-super-proxy/src/app.yaml]source: [/tmp/google-analytics-super-proxy/src]target project: [chirpy-test-XXXX]target service: [default]target version: [VESRION_NUM]target url: [https://chirpy-test-XXXX.ue.r.appspot.com]Do you want to continue (Y/n)? YBeginning deployment of service [default]...╔════════════════════════════════════════════════════════════╗╠═ Uploading 1 file to Google Cloud Storage ═╣╚════════════════════════════════════════════════════════════╝File upload done.Updating service [default]...done.Setting traffic split for service [default]...done.Deployed service [default] to [https://chirpy-test-XXXX.ue.r.appspot.com]You can stream logs from the command line by running:$ gcloud app logs tail -s defaultTo view your application in the web browser run:$ gcloud app browse Visit the deployed service. Add a /admin to the end of the URL. Click on Authorize Users and make sure to add yourself as a managed user. If you get any errors, please Google it. The errors are self-explanatory and should be easy to fix. If everything went good, you’ll get this screen:Create Google Analytics QueryHead to https://PROJECT_ID.REGION_ID.r.appspot.com/admin and create a query after verifying the account. GA Core Reporting API query request can be created in Query Explorer.The query parameters are as follows: start-date: fill in the first day of blog posting end-date: fill in today (this is a parameter supported by GA Report, which means that it will always end according to the current query date) metrics: select ga:pageviews dimensions: select ga:pagePathIn order to reduce the returned results and reduce the network bandwidth, we add custom filtering rules 1: filters: fill in ga:pagePath=~^/posts/.*/$;ga:pagePath!@=. Among them, ; means using logical AND to concatenate two rules. If the site.baseurl is specified, change the first filtering rule to ga:pagePath=~^/BASE_URL/posts/.*/$, where BASE_URL is the value of site.baseurl. After Run Query, copy the generated contents of API Query URI at the bottom of the page and fill in the Encoded URI for the query of SuperProxy on GAE.After the query is saved on GAE, a Public Endpoint (public access address) will be generated, and we will get the query result in JSON format when accessing it. Finally, click Enable Endpoint in Public Request Endpoint to make the query effective, and click Start Scheduling in Scheduling to start the scheduled task.Configure Chirpy to Display Page ViewOnce all the hard part is done, it is very easy to enable the Page View on Chirpy theme. Your superProxy dashboard should look something like below and you can grab the required values.Update the _config.yml file of Chirpy project with the values from your dashboard, to look similar to the following:google_analytics: id: 'G-V6XXXXXXX' # fill in your Google Analytics ID pv: proxy_endpoint: 'https://PROJECT_ID.REGION_ID.r.appspot.com/query?id=&lt;ID FROM SUPER PROXY&gt;' cache_path: # the local PV cache data, friendly to visitors from GFW regionNow, you should see the Page View enabled on your blog.Reference Google Analytics Core Reporting API: Filters &#8617; " }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-11 00:34:00 +0800", "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files: browserconfig.xml site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files: File(s) From Online Tool From Chirpy *.PNG ✓ ✗ *.ICO ✓ ✗ ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 20:55:00 +0800", "snippet": "PrerequisitesFollow the instructions in the Jekyll Docs to complete the installation of Ruby, RubyGems, Jekyll, and Bundler. In addition, Git is also required to be installed.InstallationCreating a New SiteThere are two ways to create a new repository for this theme: Using the Chirpy Starter - Easy to upgrade, isolates irrelevant project files so you can focus on writing. Forking on GitHub - Convenient for custom development, but difficult to upgrade. Unless you are familiar with Jekyll and are determined to tweak or contribute to this project, this approach is not recommended.Option 1. Using the Chirpy StarterCreate a new repository from the Chirpy Starter and name it &lt;GH_USERNAME&gt;.github.io, where GH_USERNAME represents your GitHub username.Option 2. Forking on GitHubFork Chirpy on GitHub and rename it to &lt;GH_USERNAME&gt;.github.io. Please note that the default branch code is in development. If you want the site to be stable, please switch to the latest tag and start writing.And then execute:$ bash tools/init.sh If you don’t want to deploy your site on GitHub Pages, append option --no-gh at the end of the above command.The above command will: Removes some files or directories from your repository: .travis.yml files under _posts If the option --no-gh is provided, the directory .github will be deleted. Otherwise, set up the GitHub Action workflow by removing the extension .hook of .github/workflows/pages-deploy.yml.hook, and then remove the other files and directories in the folder .github. Removes item Gemfile.lock from .gitignore. Creates a new commit to save the changes automatically.Installing DependenciesBefore running for the first time, go to the root directory of your site, and install dependencies as follows:$ bundleUsageConfigurationUpdate the variables of _config.yml as needed. Some of them are typical options: url avatar timezone langCustomizing StylesheetIf you need to customize the stylesheet, copy the theme’s assets/css/style.scss to the same path on your Jekyll site, and then add the custom style at the end of the style file.Starting from v4.1.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, create a new file _sass/variables-hook.scss and assign new values to the target variable in it.Customing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined by file _data/assets/cross_origin.yml, and you can replace some of them according to the network conditions in the region where your website is published.Also, if you’d like to self-host the static assets, please refer to the chirpy-static-assets.Running Local ServerYou may want to preview the site contents before publishing, so just run it by:$ bundle exec jekyll sOr run the site on Docker with the following command:$ docker run -it --rm \\ --volume=\"$PWD:/srv/jekyll\" \\ -p 4000:4000 jekyll/jekyll \\ jekyll serveAfter a while, the local service will be published at http://127.0.0.1:4000.DeploymentBefore the deployment begins, check out the file _config.yml and make sure the url is configured correctly. Furthermore, if you prefer the project site and don’t use a custom domain, or you want to visit your website with a base URL on a web server other than GitHub Pages, remember to change the baseurl to your project name that starts with a slash, e.g, /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy by Using GitHub ActionsEnsure your Jekyll site has the file .github/workflows/pages-deploy.yml. Otherwise, create a new one and fill in the contents of the sample file, and the value of the on.push.branches should be the same as your repo’s default branch name. And then rename your repository to &lt;GH_USERNAME&gt;.github.io on GitHub.Now publish your Jekyll site: Browse to your repository on GitHub. Select the tab Settings, then click Pages in the left navigation bar. Then, in the Source section (under Build and deployment), select GitHub Actions from the dropdown menu. Push any commit to remote to trigger the GitHub Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site should be deployed automatically. Visit your website at the address indicated by GitHub. Manually Build and DeployOn self-hosted servers, you cannot enjoy the convenience of GitHub Actions. Therefore, you should build the site on your local machine and then upload the site files to the server.Go to the root of the source project, and build your site as follows:$ JEKYLL_ENV=production bundle exec jekyll bOr build the site on Docker:$ docker run -it --rm \\ --env JEKYLL_ENV=production \\ --volume=\"$PWD:/srv/jekyll\" \\ jekyll/jekyll \\ jekyll buildUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server.UpgradingIt depends on how you use the theme: If you are using the theme gem (there will be gem \"jekyll-theme-chirpy\" in the Gemfile), editing the Gemfile and update the version number of the theme gem, for example: - gem \"jekyll-theme-chirpy\", \"~&gt; 3.2\", \"&gt;= 3.2.1\"+ gem \"jekyll-theme-chirpy\", \"~&gt; 3.3\", \"&gt;= 3.3.0\" And then execute the following command: $ bundle update jekyll-theme-chirpy As the version upgrades, the critical files (for details, see the Startup Template) and configuration options will change. Please refer to the Upgrade Guide to keep your repo’s files in sync with the latest version of the theme. If you forked from the source project (there will be gemspec in the Gemfile of your site), then merge the latest upstream tags into your Jekyll site to complete the upgrade.The merge is likely to conflict with your local modifications. Please be patient and careful to resolve these conflicts. " }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 14:10:00 +0800", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt; # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;] # for multiple entries---Having said that, the key author can also identify multiple entries. The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Starting from Chirpy v5.2.0, the property for the preview image is changed to image.path. If upgrading the theme from a prior version, you will have to update posts’ metadata to use new image property.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 11:33:00 +0800", "snippet": "This post is to show Markdown syntax rendering on Chirpy, you can also use it as an example of writing. Now, let’s start looking at text and typography.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph ToDo list Job Step 1 Step 2 Step 3 Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left Praesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum. Phasellus a tortor aliquam, tristique felis sit amet, elementum enim. Integer vestibulum vitae nulla nec pretium. Float to right Praesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum. Phasellus a tortor aliquam, tristique felis sit amet, elementum enim. Integer vestibulum vitae nulla nec pretium. Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
